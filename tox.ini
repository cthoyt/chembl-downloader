# Tox (http://tox.testrun.org/) is a tool for running tests
# in multiple virtualenvs. This configuration file will run the
# test suite on all supported python versions. To use it, "pip install tox"
# and then run "tox" from this directory.

[tox]
# To use a PEP 517 build-backend you are required to configure tox to use an isolated_build:
# https://tox.readthedocs.io/en/latest/example/package.html
isolated_build = True

# These environments are run in order if you just use `tox`:
envlist =
    # always keep coverage-clean first
    coverage-clean
    # code formatters
    format
    # format-docs
    # Code quality assessment
    pyroma
    lint
    mypy
    # Documentation quality assurance
    doc8
    docstr-coverage
    docs-test
    # the actual tests
    py
    doctests
    # always keep coverage-report last
    coverage-report

[testenv:.pkg]
# this special environment configures the build that tox does itself
set_env =
    UV_PREVIEW=1

[testenv]
description = Run unit and integration tests.
# Runs on the "tests" directory by default, or passes the positional
# arguments from `tox -e py <posargs_1> ... <posargs_n>
commands =
    coverage run -p -m pytest --durations=20 {posargs:tests}
    coverage combine
    coverage xml
extras =
    # See the [project.optional-dependencies] entry in pyproject.toml for "tests"
    tests
set_env =
    # this setting gets inherited into all environments, meaning
    # that things that call uv commands don't require a --preview
    UV_PREVIEW=1

[testenv:coverage-clean]
description = Remove testing coverage artifacts.
deps = coverage
skip_install = true
commands = coverage erase

[testenv:doctests]
description = Test that documentation examples run properly.
commands =
    # note that the package name is required for discovery
    xdoctest -m src/chembl_downloader
deps =
    xdoctest
    pygments
    # you might need to add additional deps/extras to make this work for your code

[testenv:treon]
description = Test that notebooks can run to completion
commands =
    treon notebooks/
deps =
    treon

[testenv:format]
description = Format the code in a deterministic way using ruff. Note that ruff check should come before ruff format when using --fix (ref: https://github.com/astral-sh/ruff-pre-commit/blob/main/README.md)
deps =
    ruff
skip_install = true
commands =
    ruff check --fix
    ruff format

[testenv:format-docs]
description = Run documentation linters.
# note that this doesn't work with sphinx-click
# or any other extension that adds extra directives
deps =
    docstrfmt
skip_install = true
commands =
    docstrfmt src/ tests/ docs/ --no-docstring-trailing-line

[testenv:format-markdown]
description = Run markdown formatter.
skip_install = true
allowlist_externals =
    npx
commands =
    npx --yes prettier --write --prose-wrap always "**/*.md"

[testenv:lint]
description = Check code quality using ruff and other tools.
skip_install = true
deps =
    ruff
commands =
    ruff check
    ruff format --check

[testenv:pyroma]
deps =
    pygments
    pyroma
skip_install = true
commands = pyroma --min=10 .
description = Run the pyroma tool to check the package friendliness of the project.

[testenv:mypy]
description = Run the mypy tool to check static typing on the project. Installs the package to make sure all type stubs get recognized.
deps =
    mypy
    types-tabulate
commands = mypy --ignore-missing-imports --strict src/ tests/

[testenv:doc8]
skip_install = true
deps =
    doc8
extras =
    docs
commands =
    doc8 docs/source/
description = Run the doc8 tool to check the style of the RST files in the project docs.

[testenv:docstr-coverage]
description = Run the docstr-coverage tool to check documentation coverage.
skip_install = true
deps =
    docstr-coverage
commands =
    docstr-coverage src/ tests/ --skip-private --skip-magic

[testenv:docs]
description = Build the documentation locally, allowing warnings.
extras =
    # See the [project.optional-dependencies] entry in pyproject.toml for "docs"
    docs
    # You might need to add additional extras if your documentation covers it
commands =
    python -m sphinx -b html -d docs/build/doctrees docs/source docs/build/html

[testenv:docs-test]
description = Test building the documentation in an isolated environment. Warnings are considered as errors via -W.
changedir = docs
extras =
    {[testenv:docs]extras}
commands =
    mkdir -p {envtmpdir}
    cp -r source {envtmpdir}/source
    python -m sphinx -W -b html     -d {envtmpdir}/build/doctrees {envtmpdir}/source {envtmpdir}/build/html
    # python -m sphinx -W -b coverage -d {envtmpdir}/build/doctrees {envtmpdir}/source {envtmpdir}/build/coverage
    # cat {envtmpdir}/build/coverage/c.txt
    # cat {envtmpdir}/build/coverage/python.txt
allowlist_externals =
    cp
    cat
    mkdir

[testenv:coverage-report]
deps = coverage[toml]
skip_install = true
commands =
    coverage report

####################
# Deployment tools #
####################

[testenv:bumpversion]
description = Bump the version number
commands = bump-my-version bump {posargs}
skip_install = true
passenv = HOME
deps =
    bump-my-version

[testenv:bumpversion-release]
description = Remove the -dev tag from the version
commands = bump-my-version bump release --tag
skip_install = true
passenv = HOME
deps =
    bump-my-version

[testenv:build]
skip_install = true
deps =
    uv
commands =
    uv build --sdist --wheel --no-build-isolation

############
# Releases #
############

# In order to make a release to PyPI, you'll need to take the following steps:
#
# 1. Navigate to https://pypi.org/account/register/ to register for Test PyPI
# 2. Navigate to https://pypi.org/manage/account/ and request to re-send a verification email.
#    This is not sent by default, and is required to set up 2-Factor Authentication.
# 3. Get account recovery codes
# 4. Set up 2-Factor Authentication
# 5. Get an API token from https://pypi.org/manage/account/token/
# 6. Install keyring with `uv tool install keyring`
# 7. Add your token to keyring with `keyring set https://upload.pypi.org/legacy/ __token__`

[testenv:release]
description = Release the code to PyPI so users can pip install it, using credentials from keyring
skip_install = true
deps =
    {[testenv:build]deps}
    uv
    keyring
commands =
    {[testenv:build]commands}
    uv publish --username __token__ --keyring-provider subprocess --publish-url https://upload.pypi.org/legacy/

[testenv:release-via-env]
description = Release the code to PyPI so users can pip install it, using credentials from the environment.
skip_install = true
deps =
    {[testenv:build]deps}
    uv
commands =
    {[testenv:build]commands}
    uv publish --publish-url https://upload.pypi.org/legacy/
passenv =
    UV_PUBLISH_USERNAME
    UV_PUBLISH_PASSWORD

[testenv:finish]
description =
    Run a workflow that removes -dev from the version, creates a tagged release on GitHub,
    creates a release on PyPI, and bumps the version again.
skip_install = true
passenv =
    HOME
deps =
    {[testenv:release]deps}
    bump-my-version
commands =
    {[testenv:bumpversion-release]commands}
    {[testenv:release]commands}
    git push --tags
    bump-my-version bump patch
    git push
allowlist_externals =
    git

#################
# Test Releases #
#################

# In order to test making a release to Test PyPI, you'll need to take the following steps:
#
# 1. Navigate to https://test.pypi.org/account/register/ to register for Test PyPI
# 2. Navigate to https://test.pypi.org/manage/account/ and request to re-send a verification email.
#    This is not sent by default, and is required to set up 2-Factor Authentication.
# 3. Get account recovery codes
# 4. Set up 2-Factor Authentication
# 5. Get an API token from https://test.pypi.org/manage/account/token/
# 6. Install keyring with `uv tool install keyring`
# 7. Add your token to keyring with `keyring set https://test.pypi.org/legacy/ __token__`

[testenv:testrelease]
description = Release the code to the test PyPI site
skip_install = true
deps =
    {[testenv:build]deps}
    uv
    keyring
commands =
    {[testenv:build]commands}
    uv publish --username __token__ --keyring-provider subprocess --publish-url https://test.pypi.org/legacy/

[testenv:testfinish]
description =
    Run a workflow that removes -dev from the version, creates a tagged release on GitHub,
    creates a release on Test PyPI, and bumps the version again.
skip_install = true
passenv =
    HOME
deps =
    {[testenv:testrelease]deps}
    bump-my-version
commands =
    {[testenv:bumpversion-release]commands}
    {[testenv:testrelease]commands}
    git push --tags
    bump-my-version bump patch
    git push
allowlist_externals =
    git
